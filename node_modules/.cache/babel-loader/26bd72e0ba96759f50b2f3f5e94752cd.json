{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport prettyFormat from 'pretty-format';\nimport MutationObserver from '@sheerun/mutationobserver-shim';\nimport waitForExpect from 'wait-for-expect';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\n\nfunction fuzzyMatches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n\n  var normalizedText = normalizer(textToMatch);\n\n  if (typeof matcher === 'string') {\n    return normalizedText.toLowerCase().includes(matcher.toLowerCase());\n  } else if (typeof matcher === 'function') {\n    return matcher(normalizedText, node);\n  } else {\n    return matcher.test(normalizedText);\n  }\n}\n\nfunction matches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n\n  var normalizedText = normalizer(textToMatch);\n\n  if (typeof matcher === 'string') {\n    return normalizedText === matcher;\n  } else if (typeof matcher === 'function') {\n    return matcher(normalizedText, node);\n  } else {\n    return matcher.test(normalizedText);\n  }\n}\n\nfunction getDefaultNormalizer(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$trim = _ref.trim,\n      trim = _ref$trim === void 0 ? true : _ref$trim,\n      _ref$collapseWhitespa = _ref.collapseWhitespace,\n      collapseWhitespace = _ref$collapseWhitespa === void 0 ? true : _ref$collapseWhitespa;\n\n  return function (text) {\n    var normalizedText = text;\n    normalizedText = trim ? normalizedText.trim() : normalizedText;\n    normalizedText = collapseWhitespace ? normalizedText.replace(/\\s+/g, ' ') : normalizedText;\n    return normalizedText;\n  };\n}\n/**\n * Constructs a normalizer to pass to functions in matches.js\n * @param {boolean|undefined} trim The user-specified value for `trim`, without\n * any defaulting having been applied\n * @param {boolean|undefined} collapseWhitespace The user-specified value for\n * `collapseWhitespace`, without any defaulting having been applied\n * @param {Function|undefined} normalizer The user-specified normalizer\n * @returns {Function} A normalizer\n */\n\n\nfunction makeNormalizer(_ref2) {\n  var trim = _ref2.trim,\n      collapseWhitespace = _ref2.collapseWhitespace,\n      normalizer = _ref2.normalizer;\n\n  if (normalizer) {\n    // User has specified a custom normalizer\n    if (typeof trim !== 'undefined' || typeof collapseWhitespace !== 'undefined') {\n      // They've also specified a value for trim or collapseWhitespace\n      throw new Error('trim and collapseWhitespace are not supported with a normalizer. ' + 'If you want to use the default trim and collapseWhitespace logic in your normalizer, ' + 'use \"getDefaultNormalizer({trim, collapseWhitespace})\" and compose that into your normalizer');\n    }\n\n    return normalizer;\n  } else {\n    // No custom normalizer specified. Just use default.\n    return getDefaultNormalizer({\n      trim: trim,\n      collapseWhitespace: collapseWhitespace\n    });\n  }\n}\n\nfunction getNodeText(node) {\n  var window = node.ownerDocument.defaultView;\n\n  if (node.matches('input[type=submit], input[type=button]')) {\n    return node.value;\n  }\n\n  return Array.from(node.childNodes).filter(function (child) {\n    return child.nodeType === window.Node.TEXT_NODE && Boolean(child.textContent);\n  }).map(function (c) {\n    return c.textContent;\n  }).join('');\n}\n\nvar _prettyFormat$plugins = prettyFormat.plugins,\n    DOMElement = _prettyFormat$plugins.DOMElement,\n    DOMCollection = _prettyFormat$plugins.DOMCollection;\n\nfunction prettyDOM(htmlElement, maxLength, options) {\n  if (htmlElement.documentElement) {\n    htmlElement = htmlElement.documentElement;\n  }\n\n  var debugContent = prettyFormat(htmlElement, _extends({\n    plugins: [DOMElement, DOMCollection],\n    printFunctionName: false,\n    highlight: true\n  }, options));\n  return maxLength !== undefined && htmlElement.outerHTML.length > maxLength ? debugContent.slice(0, maxLength) + \"...\" : debugContent;\n}\n/* eslint-disable complexity */\n\n\nfunction debugDOM(htmlElement) {\n  var limit = process.env.DEBUG_PRINT_LIMIT || 7000;\n  var inNode = typeof process !== 'undefined' && process.versions !== undefined && process.versions.node !== undefined;\n  /* istanbul ignore next */\n\n  var window = htmlElement.ownerDocument && htmlElement.ownerDocument.defaultView || undefined;\n  var inCypress = typeof global !== 'undefined' && global.Cypress || typeof window !== 'undefined' && window.Cypress;\n  /* istanbul ignore else */\n\n  if (inCypress) {\n    return '';\n  } else if (inNode) {\n    return prettyDOM(htmlElement, limit);\n  } else {\n    return prettyDOM(htmlElement, limit, {\n      highlight: false\n    });\n  }\n}\n/* eslint-enable complexity */\n\n\nfunction getElementError(message, container) {\n  return new Error([message, debugDOM(container)].filter(Boolean).join('\\n\\n'));\n}\n\nfunction firstResultOrNull(queryFunction) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  var result = queryFunction.apply(void 0, args);\n  if (result.length === 0) return null;\n  return result[0];\n}\n\nfunction queryAllByAttribute(attribute, container, text, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$exact = _ref.exact,\n      exact = _ref$exact === void 0 ? true : _ref$exact,\n      collapseWhitespace = _ref.collapseWhitespace,\n      trim = _ref.trim,\n      normalizer = _ref.normalizer;\n\n  var matcher = exact ? matches : fuzzyMatches;\n  var matchNormalizer = makeNormalizer({\n    collapseWhitespace: collapseWhitespace,\n    trim: trim,\n    normalizer: normalizer\n  });\n  return Array.from(container.querySelectorAll(\"[\" + attribute + \"]\")).filter(function (node) {\n    return matcher(node.getAttribute(attribute), node, text, matchNormalizer);\n  });\n}\n\nfunction queryByAttribute() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return firstResultOrNull.apply(void 0, [queryAllByAttribute].concat(args));\n}\n\nvar queryHelpers = /*#__PURE__*/Object.freeze({\n  debugDOM: debugDOM,\n  getElementError: getElementError,\n  firstResultOrNull: firstResultOrNull,\n  queryAllByAttribute: queryAllByAttribute,\n  queryByAttribute: queryByAttribute\n});\n\nfunction newMutationObserver(onMutation) {\n  var MutationObserverConstructor = typeof window !== 'undefined' && typeof window.MutationObserver !== 'undefined' ? window.MutationObserver : MutationObserver;\n  return new MutationObserverConstructor(onMutation);\n}\n\nfunction getDocument() {\n  /* istanbul ignore if */\n  if (typeof window === 'undefined') {\n    throw new Error('Could not find default container');\n  }\n\n  return window.document;\n}\n/*\n * There are browsers for which `setImmediate` is not available. This\n * serves as a polyfill of sorts, adopting `setTimeout` as the closest\n * equivalent\n */\n\n\nfunction getSetImmediate() {\n  /* istanbul ignore else */\n  if (typeof setImmediate === 'function') {\n    return setImmediate;\n  } else {\n    return function (fn) {\n      return setTimeout(fn, 0);\n    };\n  }\n} // It would be cleaner for this to live inside './queries', but\n// other parts of the code assume that all exports from\n// './queries' are query functions.\n\n\nvar config = {\n  testIdAttribute: 'data-testid',\n  // this is to support React's async `act` function.\n  // forcing react-testing-library to wrap all async functions would've been\n  // a total nightmare (consider wrapping every findBy* query and then also\n  // updating `within` so those would be wrapped too. Total nightmare).\n  // so we have this config option that's really only intended for\n  // react-testing-library to use. For that reason, this feature will remain\n  // undocumented.\n  asyncWrapper: function asyncWrapper(cb) {\n    return cb();\n  }\n};\n\nfunction configure(newConfig) {\n  if (typeof newConfig === 'function') {\n    // Pass the existing config out to the provided function\n    // and accept a delta in return\n    newConfig = newConfig(config);\n  } // Merge the incoming config delta\n\n\n  config = _extends({}, config, newConfig);\n}\n\nfunction getConfig() {\n  return config;\n}\n\nfunction waitForElement(callback, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$container = _ref.container,\n      container = _ref$container === void 0 ? getDocument() : _ref$container,\n      _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? 4500 : _ref$timeout,\n      _ref$mutationObserver = _ref.mutationObserverOptions,\n      mutationObserverOptions = _ref$mutationObserver === void 0 ? {\n    subtree: true,\n    childList: true,\n    attributes: true,\n    characterData: true\n  } : _ref$mutationObserver;\n\n  return new Promise(function (resolve, reject) {\n    if (typeof callback !== 'function') {\n      reject(new Error('waitForElement requires a callback as the first parameter'));\n      return;\n    }\n\n    var lastError;\n    var timer = setTimeout(onTimeout, timeout);\n    var observer = newMutationObserver(onMutation);\n    observer.observe(container, mutationObserverOptions);\n\n    function onDone(error, result) {\n      var setImmediate = getSetImmediate();\n      clearTimeout(timer);\n      setImmediate(function () {\n        return observer.disconnect();\n      });\n\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    }\n\n    function onMutation() {\n      try {\n        var result = callback();\n\n        if (result) {\n          onDone(null, result);\n        } // If `callback` returns falsy value, wait for the next mutation or timeout.\n\n      } catch (error) {\n        // Save the callback error to reject the promise with it.\n        lastError = error; // If `callback` throws an error, wait for the next mutation or timeout.\n      }\n    }\n\n    function onTimeout() {\n      onDone(lastError || new Error('Timed out in waitForElement.'), null);\n    }\n\n    onMutation();\n  });\n}\n\nfunction waitForElementWrapper() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return getConfig().asyncWrapper(function () {\n    return waitForElement.apply(void 0, args);\n  });\n} // The queries here should only be things that are accessible to both users who are using a screen reader\n// and those who are not using a screen reader (with the exception of the data-testid attribute query).\n\n\nfunction queryAllLabelsByText(container, text, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$exact = _ref.exact,\n      exact = _ref$exact === void 0 ? true : _ref$exact,\n      trim = _ref.trim,\n      collapseWhitespace = _ref.collapseWhitespace,\n      normalizer = _ref.normalizer;\n\n  var matcher = exact ? matches : fuzzyMatches;\n  var matchNormalizer = makeNormalizer({\n    collapseWhitespace: collapseWhitespace,\n    trim: trim,\n    normalizer: normalizer\n  });\n  return Array.from(container.querySelectorAll('label')).filter(function (label) {\n    return matcher(label.textContent, label, text, matchNormalizer);\n  });\n}\n\nfunction queryAllByLabelText(container, text, _temp2) {\n  var _ref2 = _temp2 === void 0 ? {} : _temp2,\n      _ref2$selector = _ref2.selector,\n      selector = _ref2$selector === void 0 ? '*' : _ref2$selector,\n      _ref2$exact = _ref2.exact,\n      exact = _ref2$exact === void 0 ? true : _ref2$exact,\n      collapseWhitespace = _ref2.collapseWhitespace,\n      trim = _ref2.trim,\n      normalizer = _ref2.normalizer;\n\n  var matchNormalizer = makeNormalizer({\n    collapseWhitespace: collapseWhitespace,\n    trim: trim,\n    normalizer: normalizer\n  });\n  var labels = queryAllLabelsByText(container, text, {\n    exact: exact,\n    normalizer: matchNormalizer\n  });\n  var labelledElements = labels.map(function (label) {\n    if (label.control) {\n      return label.control;\n    }\n    /* istanbul ignore if */\n\n\n    if (label.getAttribute('for')) {\n      // we're using this notation because with the # selector we would have to escape special characters e.g. user.name\n      // see https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector#Escaping_special_characters\n      // <label for=\"someId\">text</label><input id=\"someId\" />\n      // .control support has landed in jsdom (https://github.com/jsdom/jsdom/issues/2175)\n      return container.querySelector(\"[id=\\\"\" + label.getAttribute('for') + \"\\\"]\");\n    }\n\n    if (label.getAttribute('id')) {\n      // <label id=\"someId\">text</label><input aria-labelledby=\"someId\" />\n      return container.querySelector(\"[aria-labelledby~=\\\"\" + label.getAttribute('id') + \"\\\"]\");\n    }\n\n    if (label.childNodes.length) {\n      // <label>text: <input /></label>\n      return label.querySelector(selector);\n    }\n\n    return null;\n  }).filter(function (label) {\n    return label !== null;\n  }).concat(queryAllByAttribute('aria-label', container, text, {\n    exact: exact\n  }));\n  var possibleAriaLabelElements = queryAllByText(container, text, {\n    exact: exact,\n    normalizer: matchNormalizer\n  }).filter(function (el) {\n    return el.tagName !== 'LABEL';\n  }); // don't reprocess labels\n\n  var ariaLabelledElements = possibleAriaLabelElements.reduce(function (allLabelledElements, nextLabelElement) {\n    var labelId = nextLabelElement.getAttribute('id');\n    if (!labelId) return allLabelledElements; // ARIA labels can label multiple elements\n\n    var labelledNodes = Array.from(container.querySelectorAll(\"[aria-labelledby~=\\\"\" + labelId + \"\\\"]\"));\n    return allLabelledElements.concat(labelledNodes);\n  }, []);\n  return Array.from(new Set([].concat(labelledElements, ariaLabelledElements)));\n}\n\nfunction queryByLabelText() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return firstResultOrNull.apply(void 0, [queryAllByLabelText].concat(args));\n}\n\nfunction queryAllByText(container, text, _temp3) {\n  var _ref3 = _temp3 === void 0 ? {} : _temp3,\n      _ref3$selector = _ref3.selector,\n      selector = _ref3$selector === void 0 ? '*' : _ref3$selector,\n      _ref3$exact = _ref3.exact,\n      exact = _ref3$exact === void 0 ? true : _ref3$exact,\n      collapseWhitespace = _ref3.collapseWhitespace,\n      trim = _ref3.trim,\n      _ref3$ignore = _ref3.ignore,\n      ignore = _ref3$ignore === void 0 ? 'script, style' : _ref3$ignore,\n      normalizer = _ref3.normalizer;\n\n  var matcher = exact ? matches : fuzzyMatches;\n  var matchNormalizer = makeNormalizer({\n    collapseWhitespace: collapseWhitespace,\n    trim: trim,\n    normalizer: normalizer\n  });\n  var baseArray = [];\n\n  if (typeof container.matches === 'function' && container.matches(selector)) {\n    baseArray = [container];\n  }\n\n  return [].concat(baseArray, Array.from(container.querySelectorAll(selector))).filter(function (node) {\n    return !ignore || !node.matches(ignore);\n  }).filter(function (node) {\n    return matcher(getNodeText(node), node, text, matchNormalizer);\n  });\n}\n\nfunction queryByText() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return firstResultOrNull.apply(void 0, [queryAllByText].concat(args));\n}\n\nfunction queryAllByTitle(container, text, _temp4) {\n  var _ref4 = _temp4 === void 0 ? {} : _temp4,\n      _ref4$exact = _ref4.exact,\n      exact = _ref4$exact === void 0 ? true : _ref4$exact,\n      collapseWhitespace = _ref4.collapseWhitespace,\n      trim = _ref4.trim,\n      normalizer = _ref4.normalizer;\n\n  var matcher = exact ? matches : fuzzyMatches;\n  var matchNormalizer = makeNormalizer({\n    collapseWhitespace: collapseWhitespace,\n    trim: trim,\n    normalizer: normalizer\n  });\n  return Array.from(container.querySelectorAll('[title], svg > title')).filter(function (node) {\n    return matcher(node.getAttribute('title'), node, text, matchNormalizer) || matcher(getNodeText(node), node, text, matchNormalizer);\n  });\n}\n\nfunction queryByTitle() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return firstResultOrNull.apply(void 0, [queryAllByTitle].concat(args));\n}\n\nfunction queryAllBySelectText(container, text, _temp5) {\n  var _ref5 = _temp5 === void 0 ? {} : _temp5,\n      _ref5$exact = _ref5.exact,\n      exact = _ref5$exact === void 0 ? true : _ref5$exact,\n      collapseWhitespace = _ref5.collapseWhitespace,\n      trim = _ref5.trim,\n      normalizer = _ref5.normalizer;\n\n  var matcher = exact ? matches : fuzzyMatches;\n  var matchNormalizer = makeNormalizer({\n    collapseWhitespace: collapseWhitespace,\n    trim: trim,\n    normalizer: normalizer\n  });\n  return Array.from(container.querySelectorAll('select')).filter(function (selectNode) {\n    var selectedOptions = Array.from(selectNode.options).filter(function (option) {\n      return option.selected;\n    });\n    return selectedOptions.some(function (optionNode) {\n      return matcher(getNodeText(optionNode), optionNode, text, matchNormalizer);\n    });\n  });\n}\n\nfunction queryBySelectText() {\n  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n\n  return firstResultOrNull.apply(void 0, [queryAllBySelectText].concat(args));\n}\n\nfunction getTestIdAttribute() {\n  return getConfig().testIdAttribute;\n}\n\nvar queryByPlaceholderText = queryByAttribute.bind(null, 'placeholder');\nvar queryAllByPlaceholderText = queryAllByAttribute.bind(null, 'placeholder');\n\nvar queryByTestId = function queryByTestId() {\n  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    args[_key5] = arguments[_key5];\n  }\n\n  return queryByAttribute.apply(void 0, [getTestIdAttribute()].concat(args));\n};\n\nvar queryAllByTestId = function queryAllByTestId() {\n  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    args[_key6] = arguments[_key6];\n  }\n\n  return queryAllByAttribute.apply(void 0, [getTestIdAttribute()].concat(args));\n};\n\nvar queryByValue = queryByAttribute.bind(null, 'value');\nvar queryAllByValue = queryAllByAttribute.bind(null, 'value');\nvar queryByRole = queryByAttribute.bind(null, 'role');\nvar queryAllByRole = queryAllByAttribute.bind(null, 'role');\n\nfunction queryAllByAltText(container, alt, _temp6) {\n  var _ref6 = _temp6 === void 0 ? {} : _temp6,\n      _ref6$exact = _ref6.exact,\n      exact = _ref6$exact === void 0 ? true : _ref6$exact,\n      collapseWhitespace = _ref6.collapseWhitespace,\n      trim = _ref6.trim,\n      normalizer = _ref6.normalizer;\n\n  var matcher = exact ? matches : fuzzyMatches;\n  var matchNormalizer = makeNormalizer({\n    collapseWhitespace: collapseWhitespace,\n    trim: trim,\n    normalizer: normalizer\n  });\n  return Array.from(container.querySelectorAll('img,input,area')).filter(function (node) {\n    return matcher(node.getAttribute('alt'), node, alt, matchNormalizer);\n  });\n}\n\nfunction queryByAltText() {\n  for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    args[_key7] = arguments[_key7];\n  }\n\n  return firstResultOrNull.apply(void 0, [queryAllByAltText].concat(args));\n}\n\nfunction queryAllByDisplayValue(container, value, _temp7) {\n  var _ref7 = _temp7 === void 0 ? {} : _temp7,\n      _ref7$exact = _ref7.exact,\n      exact = _ref7$exact === void 0 ? true : _ref7$exact,\n      collapseWhitespace = _ref7.collapseWhitespace,\n      trim = _ref7.trim,\n      normalizer = _ref7.normalizer;\n\n  var matcher = exact ? matches : fuzzyMatches;\n  var matchNormalizer = makeNormalizer({\n    collapseWhitespace: collapseWhitespace,\n    trim: trim,\n    normalizer: normalizer\n  });\n  return Array.from(container.querySelectorAll(\"input,textarea,select\")).filter(function (node) {\n    if (node.tagName === 'SELECT') {\n      var selectedOptions = Array.from(node.options).filter(function (option) {\n        return option.selected;\n      });\n      return selectedOptions.some(function (optionNode) {\n        return matcher(getNodeText(optionNode), optionNode, value, matchNormalizer);\n      });\n    } else {\n      return matcher(node.value, node, value, matchNormalizer);\n    }\n  });\n}\n\nfunction queryByDisplayValue() {\n  for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n    args[_key8] = arguments[_key8];\n  }\n\n  return firstResultOrNull.apply(void 0, [queryAllByDisplayValue].concat(args));\n} // getters\n// the reason we're not dynamically generating these functions that look so similar:\n// 1. The error messages are specific to each one and depend on arguments\n// 2. The stack trace will look better because it'll have a helpful method name.\n\n\nfunction getAllByTestId(container, id) {\n  for (var _len9 = arguments.length, rest = new Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\n    rest[_key9 - 2] = arguments[_key9];\n  }\n\n  var els = queryAllByTestId.apply(void 0, [container, id].concat(rest));\n\n  if (!els.length) {\n    throw getElementError(\"Unable to find an element by: [\" + getTestIdAttribute() + \"=\\\"\" + id + \"\\\"]\", container);\n  }\n\n  return els;\n}\n\nfunction getByTestId() {\n  for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n    args[_key10] = arguments[_key10];\n  }\n\n  return firstResultOrNull.apply(void 0, [getAllByTestId].concat(args));\n}\n\nfunction getAllByTitle(container, title) {\n  for (var _len11 = arguments.length, rest = new Array(_len11 > 2 ? _len11 - 2 : 0), _key11 = 2; _key11 < _len11; _key11++) {\n    rest[_key11 - 2] = arguments[_key11];\n  }\n\n  var els = queryAllByTitle.apply(void 0, [container, title].concat(rest));\n\n  if (!els.length) {\n    throw getElementError(\"Unable to find an element with the title: \" + title + \".\", container);\n  }\n\n  return els;\n}\n\nfunction getByTitle() {\n  for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n    args[_key12] = arguments[_key12];\n  }\n\n  return firstResultOrNull.apply(void 0, [getAllByTitle].concat(args));\n}\n\nfunction getAllByValue(container, value) {\n  for (var _len13 = arguments.length, rest = new Array(_len13 > 2 ? _len13 - 2 : 0), _key13 = 2; _key13 < _len13; _key13++) {\n    rest[_key13 - 2] = arguments[_key13];\n  }\n\n  var els = queryAllByValue.apply(void 0, [container, value].concat(rest));\n\n  if (!els.length) {\n    throw getElementError(\"Unable to find an element with the value: \" + value + \".\", container);\n  }\n\n  return els;\n}\n\nfunction getByValue() {\n  for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n    args[_key14] = arguments[_key14];\n  }\n\n  return firstResultOrNull.apply(void 0, [getAllByValue].concat(args));\n}\n\nfunction getAllByPlaceholderText(container, text) {\n  for (var _len15 = arguments.length, rest = new Array(_len15 > 2 ? _len15 - 2 : 0), _key15 = 2; _key15 < _len15; _key15++) {\n    rest[_key15 - 2] = arguments[_key15];\n  }\n\n  var els = queryAllByPlaceholderText.apply(void 0, [container, text].concat(rest));\n\n  if (!els.length) {\n    throw getElementError(\"Unable to find an element with the placeholder text of: \" + text, container);\n  }\n\n  return els;\n}\n\nfunction getByPlaceholderText() {\n  for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {\n    args[_key16] = arguments[_key16];\n  }\n\n  return firstResultOrNull.apply(void 0, [getAllByPlaceholderText].concat(args));\n}\n\nfunction getAllByLabelText(container, text) {\n  for (var _len17 = arguments.length, rest = new Array(_len17 > 2 ? _len17 - 2 : 0), _key17 = 2; _key17 < _len17; _key17++) {\n    rest[_key17 - 2] = arguments[_key17];\n  }\n\n  var els = queryAllByLabelText.apply(void 0, [container, text].concat(rest));\n\n  if (!els.length) {\n    var labels = queryAllLabelsByText.apply(void 0, [container, text].concat(rest));\n\n    if (labels.length) {\n      throw getElementError(\"Found a label with the text of: \" + text + \", however no form control was found associated to that label. Make sure you're using the \\\"for\\\" attribute or \\\"aria-labelledby\\\" attribute correctly.\", container);\n    } else {\n      throw getElementError(\"Unable to find a label with the text of: \" + text, container);\n    }\n  }\n\n  return els;\n}\n\nfunction getByLabelText() {\n  for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {\n    args[_key18] = arguments[_key18];\n  }\n\n  return firstResultOrNull.apply(void 0, [getAllByLabelText].concat(args));\n}\n\nfunction getAllByText(container, text) {\n  for (var _len19 = arguments.length, rest = new Array(_len19 > 2 ? _len19 - 2 : 0), _key19 = 2; _key19 < _len19; _key19++) {\n    rest[_key19 - 2] = arguments[_key19];\n  }\n\n  var els = queryAllByText.apply(void 0, [container, text].concat(rest));\n\n  if (!els.length) {\n    throw getElementError(\"Unable to find an element with the text: \" + text + \". This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.\", container);\n  }\n\n  return els;\n}\n\nfunction getByText() {\n  for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {\n    args[_key20] = arguments[_key20];\n  }\n\n  return firstResultOrNull.apply(void 0, [getAllByText].concat(args));\n}\n\nfunction getAllByAltText(container, alt) {\n  for (var _len21 = arguments.length, rest = new Array(_len21 > 2 ? _len21 - 2 : 0), _key21 = 2; _key21 < _len21; _key21++) {\n    rest[_key21 - 2] = arguments[_key21];\n  }\n\n  var els = queryAllByAltText.apply(void 0, [container, alt].concat(rest));\n\n  if (!els.length) {\n    throw getElementError(\"Unable to find an element with the alt text: \" + alt, container);\n  }\n\n  return els;\n}\n\nfunction getByAltText() {\n  for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {\n    args[_key22] = arguments[_key22];\n  }\n\n  return firstResultOrNull.apply(void 0, [getAllByAltText].concat(args));\n}\n\nfunction getAllByRole(container, id) {\n  for (var _len23 = arguments.length, rest = new Array(_len23 > 2 ? _len23 - 2 : 0), _key23 = 2; _key23 < _len23; _key23++) {\n    rest[_key23 - 2] = arguments[_key23];\n  }\n\n  var els = queryAllByRole.apply(void 0, [container, id].concat(rest));\n\n  if (!els.length) {\n    throw getElementError(\"Unable to find an element by role=\" + id, container);\n  }\n\n  return els;\n}\n\nfunction getByRole() {\n  for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {\n    args[_key24] = arguments[_key24];\n  }\n\n  return firstResultOrNull.apply(void 0, [getAllByRole].concat(args));\n}\n\nfunction getAllBySelectText(container, text) {\n  for (var _len25 = arguments.length, rest = new Array(_len25 > 2 ? _len25 - 2 : 0), _key25 = 2; _key25 < _len25; _key25++) {\n    rest[_key25 - 2] = arguments[_key25];\n  }\n\n  var els = queryAllBySelectText.apply(void 0, [container, text].concat(rest));\n\n  if (!els.length) {\n    throw getElementError(\"Unable to find a <select> element with the selected option's text: \" + text, container);\n  }\n\n  return els;\n}\n\nfunction getBySelectText() {\n  for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {\n    args[_key26] = arguments[_key26];\n  }\n\n  return firstResultOrNull.apply(void 0, [getAllBySelectText].concat(args));\n}\n\nfunction getAllByDisplayValue(container, value) {\n  for (var _len27 = arguments.length, rest = new Array(_len27 > 2 ? _len27 - 2 : 0), _key27 = 2; _key27 < _len27; _key27++) {\n    rest[_key27 - 2] = arguments[_key27];\n  }\n\n  var els = queryAllByDisplayValue.apply(void 0, [container, value].concat(rest));\n\n  if (!els.length) {\n    throw getElementError(\"Unable to find an element with the value: \" + value + \".\", container);\n  }\n\n  return els;\n}\n\nfunction getByDisplayValue() {\n  for (var _len28 = arguments.length, args = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++) {\n    args[_key28] = arguments[_key28];\n  }\n\n  return firstResultOrNull.apply(void 0, [getAllByDisplayValue].concat(args));\n}\n\nfunction makeFinder(getter) {\n  return function (container, text, options, waitForElementOptions) {\n    return waitForElementWrapper(function () {\n      return getter(container, text, options);\n    }, waitForElementOptions);\n  };\n}\n\nvar findByLabelText = makeFinder(getByLabelText);\nvar findAllByLabelText = makeFinder(getAllByLabelText);\nvar findByPlaceholderText = makeFinder(getByPlaceholderText);\nvar findAllByPlaceholderText = makeFinder(getAllByPlaceholderText);\nvar findByText = makeFinder(getByText);\nvar findAllByText = makeFinder(getAllByText);\nvar findByAltText = makeFinder(getByAltText);\nvar findAllByAltText = makeFinder(getAllByAltText);\nvar findByTitle = makeFinder(getByTitle);\nvar findAllByTitle = makeFinder(getAllByTitle);\nvar findByDisplayValue = makeFinder(getByDisplayValue);\nvar findAllByDisplayValue = makeFinder(getAllByDisplayValue);\nvar findByRole = makeFinder(getByRole);\nvar findAllByRole = makeFinder(getAllByRole);\nvar findByTestId = makeFinder(getByTestId);\nvar findAllByTestId = makeFinder(getAllByTestId);\n/* eslint complexity:[\"error\", 14] */\n\nvar defaultQueries = /*#__PURE__*/Object.freeze({\n  findByLabelText: findByLabelText,\n  findAllByLabelText: findAllByLabelText,\n  findByPlaceholderText: findByPlaceholderText,\n  findAllByPlaceholderText: findAllByPlaceholderText,\n  findByText: findByText,\n  findAllByText: findAllByText,\n  findByAltText: findByAltText,\n  findAllByAltText: findAllByAltText,\n  findByTitle: findByTitle,\n  findAllByTitle: findAllByTitle,\n  findByDisplayValue: findByDisplayValue,\n  findAllByDisplayValue: findAllByDisplayValue,\n  findByRole: findByRole,\n  findAllByRole: findAllByRole,\n  findByTestId: findByTestId,\n  findAllByTestId: findAllByTestId,\n  queryByPlaceholderText: queryByPlaceholderText,\n  queryAllByPlaceholderText: queryAllByPlaceholderText,\n  getByPlaceholderText: getByPlaceholderText,\n  getAllByPlaceholderText: getAllByPlaceholderText,\n  queryByText: queryByText,\n  queryAllByText: queryAllByText,\n  getByText: getByText,\n  getAllByText: getAllByText,\n  queryByLabelText: queryByLabelText,\n  queryAllByLabelText: queryAllByLabelText,\n  getByLabelText: getByLabelText,\n  getAllByLabelText: getAllByLabelText,\n  queryByAltText: queryByAltText,\n  queryAllByAltText: queryAllByAltText,\n  getByAltText: getByAltText,\n  getAllByAltText: getAllByAltText,\n  queryBySelectText: queryBySelectText,\n  queryAllBySelectText: queryAllBySelectText,\n  getBySelectText: getBySelectText,\n  getAllBySelectText: getAllBySelectText,\n  queryByTestId: queryByTestId,\n  queryAllByTestId: queryAllByTestId,\n  getByTestId: getByTestId,\n  getAllByTestId: getAllByTestId,\n  queryByTitle: queryByTitle,\n  queryAllByTitle: queryAllByTitle,\n  getByTitle: getByTitle,\n  getAllByTitle: getAllByTitle,\n  queryByValue: queryByValue,\n  queryAllByValue: queryAllByValue,\n  getByValue: getByValue,\n  getAllByValue: getAllByValue,\n  queryByDisplayValue: queryByDisplayValue,\n  queryAllByDisplayValue: queryAllByDisplayValue,\n  getByDisplayValue: getByDisplayValue,\n  getAllByDisplayValue: getAllByDisplayValue,\n  queryByRole: queryByRole,\n  queryAllByRole: queryAllByRole,\n  getAllByRole: getAllByRole,\n  getByRole: getByRole\n});\n/**\n * @typedef {{[key: string]: Function}} FuncMap\n */\n\n/**\n * @param {HTMLElement} element container\n * @param {FuncMap} queries object of functions\n * @returns {FuncMap} returns object of functions bound to container\n */\n\nfunction getQueriesForElement(element, queries) {\n  if (queries === void 0) {\n    queries = defaultQueries;\n  }\n\n  return Object.keys(queries).reduce(function (helpers, key) {\n    var fn = queries[key];\n    helpers[key] = fn.bind(null, element);\n    return helpers;\n  }, {});\n}\n\nfunction wait(callback, _temp) {\n  if (callback === void 0) {\n    callback = function callback() {};\n  }\n\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? 4500 : _ref$timeout,\n      _ref$interval = _ref.interval,\n      interval = _ref$interval === void 0 ? 50 : _ref$interval;\n\n  return waitForExpect(callback, timeout, interval);\n}\n\nfunction waitWrapper() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return getConfig().asyncWrapper(function () {\n    return wait.apply(void 0, args);\n  });\n}\n\nfunction waitForElementToBeRemoved(callback, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$container = _ref.container,\n      container = _ref$container === void 0 ? getDocument() : _ref$container,\n      _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? 4500 : _ref$timeout,\n      _ref$mutationObserver = _ref.mutationObserverOptions,\n      mutationObserverOptions = _ref$mutationObserver === void 0 ? {\n    subtree: true,\n    childList: true,\n    attributes: true,\n    characterData: true\n  } : _ref$mutationObserver;\n\n  return new Promise(function (resolve, reject) {\n    if (typeof callback !== 'function') {\n      reject(new Error('waitForElementToBeRemoved requires a function as the first parameter'));\n    }\n\n    var timer = setTimeout(function () {\n      onDone(new Error('Timed out in waitForElementToBeRemoved.'), null);\n    }, timeout);\n    var observer = newMutationObserver(function () {\n      try {\n        var _result = callback();\n\n        if (!_result || Array.isArray(_result) && !_result.length) {\n          onDone(null, true);\n        } // If `callback` returns truthy value, wait for the next mutation or timeout.\n\n      } catch (error) {\n        onDone(null, true);\n      }\n    }); // Check if the element is not present synchronously,\n    // As the name waitForElementToBeRemoved should check `present` --> `removed`\n\n    try {\n      var result = callback();\n\n      if (!result || Array.isArray(result) && !result.length) {\n        onDone(new Error('The callback function which was passed did not return an element or non-empty array of elements. waitForElementToBeRemoved requires that the element(s) exist before waiting for removal.'));\n      } else {\n        // Only observe for mutations only if there is element while checking synchronously\n        observer.observe(container, mutationObserverOptions);\n      }\n    } catch (error) {\n      onDone(error);\n    }\n\n    function onDone(error, result) {\n      var setImmediate = getSetImmediate();\n      clearTimeout(timer);\n      setImmediate(function () {\n        return observer.disconnect();\n      });\n\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    }\n  });\n}\n\nfunction waitForElementToBeRemovedWrapper() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return getConfig().asyncWrapper(function () {\n    return waitForElementToBeRemoved.apply(void 0, args);\n  });\n}\n\nfunction waitForDomChange(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$container = _ref.container,\n      container = _ref$container === void 0 ? getDocument() : _ref$container,\n      _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? 4500 : _ref$timeout,\n      _ref$mutationObserver = _ref.mutationObserverOptions,\n      mutationObserverOptions = _ref$mutationObserver === void 0 ? {\n    subtree: true,\n    childList: true,\n    attributes: true,\n    characterData: true\n  } : _ref$mutationObserver;\n\n  return new Promise(function (resolve, reject) {\n    var setImmediate = getSetImmediate();\n    var timer = setTimeout(function () {\n      onDone(new Error('Timed out in waitForDomChange.'), null);\n    }, timeout);\n    var observer = newMutationObserver(function (mutationsList) {\n      onDone(null, mutationsList);\n    });\n    observer.observe(container, mutationObserverOptions);\n\n    function onDone(error, result) {\n      clearTimeout(timer);\n      setImmediate(function () {\n        return observer.disconnect();\n      });\n\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    }\n  });\n}\n\nfunction waitForDomChangeWrapper() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return getConfig().asyncWrapper(function () {\n    return waitForDomChange.apply(void 0, args);\n  });\n}\n\nvar eventMap = {\n  // Clipboard Events\n  copy: {\n    EventType: 'ClipboardEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  cut: {\n    EventType: 'ClipboardEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  paste: {\n    EventType: 'ClipboardEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  // Composition Events\n  compositionEnd: {\n    EventType: 'CompositionEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  compositionStart: {\n    EventType: 'CompositionEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  compositionUpdate: {\n    EventType: 'CompositionEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  // Keyboard Events\n  keyDown: {\n    EventType: 'KeyboardEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      charCode: 0\n    }\n  },\n  keyPress: {\n    EventType: 'KeyboardEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      charCode: 0\n    }\n  },\n  keyUp: {\n    EventType: 'KeyboardEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      charCode: 0\n    }\n  },\n  // Focus Events\n  focus: {\n    EventType: 'FocusEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  blur: {\n    EventType: 'FocusEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  focusIn: {\n    EventType: 'FocusEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  focusOut: {\n    EventType: 'FocusEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  // Form Events\n  change: {\n    EventType: 'InputEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  input: {\n    EventType: 'InputEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  invalid: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: true\n    }\n  },\n  submit: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  // Mouse Events\n  click: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      button: 0\n    }\n  },\n  contextMenu: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  dblClick: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  drag: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  dragEnd: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  dragEnter: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  dragExit: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  dragLeave: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  dragOver: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  dragStart: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  drop: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  mouseDown: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  mouseEnter: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  mouseLeave: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  mouseMove: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  mouseOut: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  mouseOver: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  mouseUp: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  // Selection Events\n  select: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  // Touch Events\n  touchCancel: {\n    EventType: 'TouchEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  touchEnd: {\n    EventType: 'TouchEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  touchMove: {\n    EventType: 'TouchEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  touchStart: {\n    EventType: 'TouchEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  // UI Events\n  scroll: {\n    EventType: 'UIEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  // Wheel Events\n  wheel: {\n    EventType: 'WheelEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  // Media Events\n  abort: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  canPlay: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  canPlayThrough: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  durationChange: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  emptied: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  encrypted: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  ended: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  // error: {\n  //   EventType: Event,\n  //   defaultInit: {bubbles: false, cancelable: false},\n  // },\n  loadedData: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  loadedMetadata: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  loadStart: {\n    EventType: 'ProgressEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  pause: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  play: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  playing: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  progress: {\n    EventType: 'ProgressEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  rateChange: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  seeked: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  seeking: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  stalled: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  suspend: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  timeUpdate: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  volumeChange: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  waiting: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  // Image Events\n  load: {\n    EventType: 'UIEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  error: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  // Animation Events\n  animationStart: {\n    EventType: 'AnimationEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  animationEnd: {\n    EventType: 'AnimationEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  animationIteration: {\n    EventType: 'AnimationEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  // Transition Events\n  transitionEnd: {\n    EventType: 'TransitionEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  }\n};\nvar eventAliasMap = {\n  doubleClick: 'dblClick'\n};\n\nfunction fireEvent(element, event) {\n  return element.dispatchEvent(event);\n}\n\nObject.keys(eventMap).forEach(function (key) {\n  var _eventMap$key = eventMap[key],\n      EventType = _eventMap$key.EventType,\n      defaultInit = _eventMap$key.defaultInit;\n  var eventName = key.toLowerCase();\n\n  fireEvent[key] = function (node, init) {\n    var eventInit = _extends({}, defaultInit, init);\n\n    var _eventInit$target = eventInit.target;\n    _eventInit$target = _eventInit$target === void 0 ? {} : _eventInit$target;\n\n    var value = _eventInit$target.value,\n        files = _eventInit$target.files,\n        targetProperties = _objectWithoutPropertiesLoose(_eventInit$target, [\"value\", \"files\"]);\n\n    Object.assign(node, targetProperties);\n\n    if (value !== undefined) {\n      setNativeValue(node, value);\n    }\n\n    if (files !== undefined) {\n      // input.files is a read-only property so this is not allowed:\n      // input.files = [file]\n      // so we have to use this workaround to set the property\n      Object.defineProperty(node, 'files', {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: files\n      });\n    }\n\n    var window = getWindowFromNode(node);\n    var EventConstructor = window[EventType] || window.Event;\n    var event = new EventConstructor(eventName, eventInit);\n    return fireEvent(node, event);\n  };\n});\n\nfunction getWindowFromNode(node) {\n  // istanbul ignore next I'm not sure what could cause the final else so we'll leave it uncovered.\n  if (node.defaultView) {\n    // node is document\n    return node.defaultView;\n  } else if (node.ownerDocument) {\n    // node is a DOM node\n    return node.ownerDocument.defaultView;\n  } else if (node.window) {\n    // node is window\n    return node.window;\n  } else {\n    // no idea...\n    throw new Error(\"Unable to find the \\\"window\\\" object for the given node. fireEvent currently supports firing events on DOM nodes, document, and window. Please file an issue with the code that's causing you to see this error: https://github.com/kentcdodds/dom-testing-library/issues/new\");\n  }\n} // function written after some investigation here:\n// https://github.com/facebook/react/issues/10135#issuecomment-401496776\n\n\nfunction setNativeValue(element, value) {\n  var _ref = Object.getOwnPropertyDescriptor(element, 'value') || {},\n      valueSetter = _ref.set;\n\n  var prototype = Object.getPrototypeOf(element);\n\n  var _ref2 = Object.getOwnPropertyDescriptor(prototype, 'value') || {},\n      prototypeValueSetter = _ref2.set;\n\n  if (prototypeValueSetter && valueSetter !== prototypeValueSetter) {\n    prototypeValueSetter.call(element, value);\n  }\n  /* istanbul ignore next (I don't want to bother) */\n  else if (valueSetter) {\n      valueSetter.call(element, value);\n    } else {\n      throw new Error('The given element does not have a value setter');\n    }\n}\n\nObject.keys(eventAliasMap).forEach(function (aliasKey) {\n  var key = eventAliasMap[aliasKey];\n\n  fireEvent[aliasKey] = function () {\n    return fireEvent[key].apply(fireEvent, arguments);\n  };\n});\n/* eslint complexity:[\"error\", 9] */\n\nexport { getQueriesForElement as bindElementToQueries, configure, debugDOM, findAllByAltText, findAllByDisplayValue, findAllByLabelText, findAllByPlaceholderText, findAllByRole, findAllByTestId, findAllByText, findAllByTitle, findByAltText, findByDisplayValue, findByLabelText, findByPlaceholderText, findByRole, findByTestId, findByText, findByTitle, fireEvent, firstResultOrNull, getAllByAltText, getAllByDisplayValue, getAllByLabelText, getAllByPlaceholderText, getAllByRole, getAllBySelectText, getAllByTestId, getAllByText, getAllByTitle, getAllByValue, getByAltText, getByDisplayValue, getByLabelText, getByPlaceholderText, getByRole, getBySelectText, getByTestId, getByText, getByTitle, getByValue, getDefaultNormalizer, getElementError, getNodeText, getQueriesForElement, prettyDOM, defaultQueries as queries, queryAllByAltText, queryAllByAttribute, queryAllByDisplayValue, queryAllByLabelText, queryAllByPlaceholderText, queryAllByRole, queryAllBySelectText, queryAllByTestId, queryAllByText, queryAllByTitle, queryAllByValue, queryByAltText, queryByAttribute, queryByDisplayValue, queryByLabelText, queryByPlaceholderText, queryByRole, queryBySelectText, queryByTestId, queryByText, queryByTitle, queryByValue, queryHelpers, waitWrapper as wait, waitForDomChangeWrapper as waitForDomChange, waitForElementWrapper as waitForElement, waitForElementToBeRemovedWrapper as waitForElementToBeRemoved, getQueriesForElement as within };","map":null,"metadata":{},"sourceType":"module"}